#!/bin/bash

### Requirements:
# imagemagick
# xclip (optional)
# dunst | notify-send (optional)

function _help() {
    local filename=`basename $0`
    echo     "Usage:"
    echo -e  "~~~~~~\n"
    echo -n  "$ ${filename%.*} [-f|--full] [-d|--delay N] [-p|--purge] [-o|--output-file] "
    echo -e  "[-s|--silent] [-h|--help]\n"
    echo     "No arguments:"
    echo -e  "    User draws a rectangle and the screenshot of that region is taken\n"
    echo     "[-f|--full]"
    echo -e  "    Takes a screenshot of the entire screen\n"
    echo     "[-d|--delay N]"
    echo -e  "    Wait N sec before doing anything\n"
    echo     "[-p|--purge]"
    echo -e  "    Clear all saved screenshots\n"
    echo     "[-o|--output-file out_file]"
    echo -e  "    Save to output file <out_file>\n"
    echo     "[-h|--help]"
    echo -e  "    Print this help menu and exit\n"
    echo     "Notes:"
    echo -e  "~~~~~~"
    echo     "    Automatically copies the screenshot to clipboard if xclip is installed."
    echo     "    Stores the last $max_sshots screenshots as $out_dir${common_prefix}<date>.png"
}

### Parameters:
# Run _sshot -h to view them
function _sshot() {
    ### set up file paths, file prefixes and number of screenshots to store
    local out_dir=/home/$USER/Pictures/screenshots/
    mkdir -p $out_dir
    local common_prefix=sshot_
    local prefix=$common_prefix`date +%d_%m_%Y_%H:%M:%S`
    local sshot_paths=(`ls $out_dir$common_prefix*`)
    #declare -p sshot_paths
    # where to write the newly taken screenshot
    local newfile=$out_dir${prefix}.png
    local len_sshot_paths=${#sshot_paths[@]}
    # hold up to 15 screenshot files
    local max_sshots=15
    
    ### grab command line parameters  
    # parameters to read from user - default values
    # empty arguments in import command result in screenshot of region
    local import_cmd_args=""
    local delay_sec=0
    # parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                _help
                exit 0
                ;;
            -d|--delay)
                local delay_sec=$2
                shift # past argument
                shift # past value
                ;;
            -f|--full)
                import_cmd_args="-window root"
                shift
                ;;
            -p|--purge)
                rm $out_dir${common_prefix}*
                if has dunst; then
                    dunstify -u low "All screenshots deleted!" 
                elif has notify-send; then
                    notify-send --expire-time=3000 "All screenshots deleted!" 
                fi
                exit 0
                ;;
            -o|--output-file)
                shift # past argument
                newfile=$1
                shift # past value
                ;;
            -s|--silent)
                local silent=""
                shift
                ;;
            --default)
                cmd="import $newfile"
                shift # past argument
                ;;
            -*|--*)
                echo "Unknown option $1"
                _help
                exit 1
                ;;
            *)
                shift # past argument
                ;;
        esac
    done
    set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

    ### make sure to only store the last `max_sshots` screenshots
    if [[ $filename == *$prefix* ]]; then
        # if there's already `max_sshots` screenshots, pop the last one and push in front 
        if [ $len_sshot_paths -gt $[$max_sshots-1] ]; then
            rm ${sshot_paths[0]}
            unset 'sshot_paths[0]'
            sshot_paths=($newfile ${sshot_paths[@]})
        else
            # else append to the end
            sshot_paths+=($newfile)
        fi
    fi
    # else user has overwriten the name of the screenshot 
    # so don't check the list of stored one

    # wait if necessary
    sleep $delay_sec
    # screenshot command
    local cmd="import $import_cmd_args $newfile"
    eval $cmd
    local xclip_message=""
    /has xclip && xclip -selection clipboard -t image/png -i ${newfile} \
               && xclip_message="copied to clipboard!"
    if [ -z ${silent+x} ]; then
        if has dunst; then
            dunstctl close all
            dunstify -u low -i $newfile "Screenshot at $newfile $xclip_message"
        elif has notify-send; then
            notify-send --expire-time=3000 -i $newfile "Screenshot at $newfile $xclip_message"
        fi
    fi
}


. ~/.bash/scripts/add_dir_to_path.sh
_sshot $@ &
